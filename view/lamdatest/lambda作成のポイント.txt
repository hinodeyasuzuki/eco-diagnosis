https://dev.classmethod.jp/cloud/aws/api-gateway/　がわかりやすい

※node APIおまかせでやると、セキュリティなどがいろいろ要求されて何がポイントかわかりにくくなる。
※値を返す方法だけ、コピーして使う

■lambdaシンプルに
　lambdaで　node.js作成。ロールは simple。これでも DBがついてくる。

記述　
exports.handler = (event, context, callback) => {
    const done = (err, res) => callback(null, {
    .
    }
.
}

event.data に ajaxで渡された data　の値が入るのでこれをparseして使う
結果は done("",res) で返す。エラーの場合は、1つ目のパラメータ

パラメータを設定してテストを行うと、lambda関数として適切か設定できる。

■API gatewayを追加
　新しいAPIを定義するのがいい。
　
　CROSを設定して、外部からアクセスできるようにする。ただし、ぜんぶAPIがわでやってくれる
わけではなさそうで、

        headers: {
            'Access-Control-Allow-Origin':'*',
            'Content-Type': 'application/json'
        },

　をlambda側に設定する。必要に応じて制限する。

　APIコードを設定することもできる。（関係なさそう動かない）
 POSTを明確に定義しておく
 

 ■lambdaへのパラメータ渡しの問題
　API gateway の統合リクエストで、送信するデータを設定することができる。
　標準では、ajax の data で送られたパラメータ * は、node.jsの event["body-json"][*]　で受け取れる
　　■マッピングテンプレートで、POSTとNODEの橋渡しをする

■HTML側で値を受け取ってからの JSON.parse が処理できない ところどころ []があるため？
 　→処理しなくてもいい、jqueryではparse済みの状態で処理できる

■ローカルでは動くものの、Nodeでは　エラーとなる。 Object が定義されていない。
　→単にペーストに失敗しているだけのよう


■■整理■-------------作業ステップ

lambda　関数作成
　・名前
　・ランタイム（node8)
  ・ロール：シンプルなマイクロサービス（croudwatch,DBも含まれる）　diagnosis6
　・※（関数のテスト）

関数設定
　・トリガーで「API gateway」を選択、新規のAPI設定　（APIキー必要/不要）

API設定（APIタイトルのリンクをクリックする）
　・メソッドリクエスト（APIキー等）
　・統合リクエスト（パラメータの受け渡し：標準では ajaxのdataは enevt["body-json"]で取得できる。
　・※（メソッドの実行：APIからのテスト）　{}でjson形式で渡す。
　・メソッドの追加（POST/GET）
　・
APIのCORSの設定
　・クロスドメインを有効化する

リソースポリシー
　・アクセス制限など（初期状態は制限なし）

APIキーの設定（使う場合）

APIのデブロイ
　・HTML側からアクセスのテスト





