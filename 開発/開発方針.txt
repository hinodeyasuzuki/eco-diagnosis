■基本ポリシー

ソースコードが見られることは前提で、JSで開発を行う。

ブラウザ
　・webworker（計算側）を使っての開発
　・ブラウザ側はビューに徹する


■検討
node.jsであればサーバー側でオンメモリで処理ができる。
　※一度構造を作って、計算だけさせる使い方には適している。
　※インターネット環境が必要

ロジックをつくっておく。

クラスをどう作るのか
　E5



cons[]  consCalc

mes[]   mesCalc

元が取れるかどうか
　元がとれない対策はできない　−　CO2削減ができるなら多少元がとれなくてもいい

元が取れるのであれば
　数十万円以上の初期投資も構わない　−　初期投資は考えていない

効果分布　σ（無回答のときのもの）
　全ての条件ができたときのσ（対数正規分布として比率）
　質問の回答がされると、それに応じてσが小さくなる
　　　質問に対してσが変化する
　　　２つの選択肢で、１つは評価できない場合には、該当する場合に

　　　当てはまらない割合　　　：　
　　　削減効果がでない割合　：回答の分布などが影響する



■表示をD6側で行うか、加工データ形式を定義して受信側で表示するように変更
　定義は D6側で持っているため、それをすべて送信することは現実的ではない。
　ただし、ローカル側で読み取ってもいいのでは？


sdata.average


■どこでoverrideされるかがわかりにくい
　電力料金（地域、会社、契約による違い）
　　→電力会社による上書き、比率による上書き、契約による上書き
　　→上書きするときにメモをしておく。比率で計算するときにはベース値を明示する
　　　※クラス内定義では、初期化時に他のクラス値を参照できない。



■修正レベル
　対策もオーバーライドして使う。

０）core developer
　・共有ロジックにうちての追加

１）developer プラットホームの修正　対象すべて 
　・分野の追加
　・対策の追加（共通コミット）IDの確定
　・入力項目IDの確定

２）desinger　地域対応　対象 /baseを除くすべて 
　・/disp についても共通化できる可能性がある。一部地域、言語依存がある
　　　　一般化して、オーバーライド（プロトタイプ化）して使う
　・

３）adviser アドバイザー
　・提案できる対策を制限する
　・画面表示を変更する

４）user　利用者
　・画面モードを選べる
　・入力値を変更できる


■選択された対策をあとから閲覧できる仕組み

記録

○ユーザ登録
　メールアドレス
　パスワード

○定期的メール送信


uID CODE タイトル名　CO2削減効果　光熱費削減効果　選択日



■ログイン用パッケージの導入　sentinel
http://am1tanaka.hatenablog.com/entry/2016/03/05/183048
https://sukohi.blogspot.jp/2016/01/phpsentinel.html


ログインボタン　パスワード再発行　−　ログアウト　修正　


・ログイン時メール本文
・再発行メール本文
・ログイン画面		login
・パスワード再発行後	afterreminder
・パスワード設定		setpassword
・登録情報変更　 	edituser


■言語設定の完全分離

index.php
developcore
	d6
common
	view
	login
language
	d6logic
	focussetting
	language.js/.html
tools
	excelfiles
	package
	

リリース時
index.php（もしくはindex.html)
common
	view
	login
language
	d6.min
	language.js/.html
	
■保存はjson形式がいい






